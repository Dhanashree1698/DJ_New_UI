using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Http; 
using GDMS.Entities;
using GDMS.Repository.Interfaces;
using GDMS.WebAPI.Extensions;
using System.Web.Http.Cors;
using System.Configuration;

namespace GDMS.WebAPI.Controllers
{
    [EnableCors(origins: "*", headers: "*", methods: "*")]
	[SimpleRateLimitFilter]
	public class DataUploadController : ApiController
    {
		IDataUpload<DataUploadEntity> objRepositary;
		public DataUploadController(IDataUpload<DataUploadEntity> obj)
		{
			objRepositary = obj;
		}
		[HttpGet]
		[Route("api/DataUpload/GetList")]
		public HttpResponseMessage GetList([FromUri] string user_Token)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(user_Token))
				{
					var objData = objRepositary.Get();
					if (objData != null)
						return Request.CreateResponse(HttpStatusCode.OK, objData);
					else return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Internal server error"); ;
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}
	
		//[HttpGet]
		//[Route("api/DataUpload/GetDetails")]
		//public HttpResponseMessage GetDetails([FromUri] int ID, string user_Token)
		//{
		//	try
		//	{
		//		if (ValidateTokenExtension.ValidateToken(user_Token))
		//		{
		//			var objData = objRepositary.Get(ID);
		//			if (objData != null)
		//				return Request.CreateResponse(HttpStatusCode.OK, objData);
		//			else return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Data not fount!!!");
		//		}
		//		else
		//			return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
		//	}
		//	catch (Exception ex)
		//	{
		//		LogError(ex);
		//		return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
		//	}
		//}

        [HttpGet]
        [Route("api/DataUpload/GetFieldsName")]
        public HttpResponseMessage GetFieldsName([FromUri] int ID, string user_Token)
        {
            try
            {
                if (ValidateTokenExtension.ValidateToken(user_Token))
                {
                    var objData = objRepositary.GetDetails(ID);
                    if (objData != null)
                        return Request.CreateResponse(HttpStatusCode.OK, objData);
                    else return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Data not fount!!!");
                }
                else
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
            }
            catch (Exception ex)
            {
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
            }
        }
        
        [HttpPost]
		[Route("api/DataUpload/Create")]
		public HttpResponseMessage Post([FromBody]DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.Add(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}

		[HttpPost]
		[Route("api/DataUpload/BulkUserUpload")]
		public HttpResponseMessage BulkUserUpload([FromBody] DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.BulkUserUpload(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}


		[HttpPost]
		[Route("api/DataUpload/BulkFolderUpload")]
		public HttpResponseMessage BulkFolderUpload([FromBody] DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.BulkFolderUpload(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}


		[HttpPost]
		[Route("api/DataUpload/BulkFolderMapping")]
		public HttpResponseMessage BulkFolderMapping([FromBody] DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.BulkFolderMapping(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}

		[HttpPost]
		[Route("api/DataUpload/BulkFileNameMapping")]
		public HttpResponseMessage BulkFileNameMapping([FromBody] DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.BulkFileNameMapping(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}


		[HttpPost]
		[Route("api/DataUpload/Update")]
		public HttpResponseMessage Update([FromBody]DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					if (!string.IsNullOrEmpty(objRepositary.Update(objEntity)))
					{
						return Request.CreateResponse(HttpStatusCode.OK, "Document is updated successfully!!");
					}
					else
					{
						return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
					}
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}

		[HttpPost]
		[Route("api/DataUpload/BulkFileRenaming")]
		public HttpResponseMessage BulkFileRenaming([FromBody] DataUploadEntity objEntity)
		{
			try
			{
				if (ValidateTokenExtension.ValidateToken(objEntity.User_Token))
				{

					string val = objRepositary.BulkFileRenaming(objEntity);
					return Request.CreateResponse(HttpStatusCode.OK, val);
				}
				else
					return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Invalid token!!!");
			}
			catch (Exception ex)
			{
				LogError(ex);
				return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Internal server error");
			}
		}

		private void LogError(Exception ex)
		{
			var TempPath = (ConfigurationManager.AppSettings["temp"].ToString());
			string message = string.Format("Time: {0}", DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"));
			message += Environment.NewLine;
			message += "-----------------------------------------------------------";
			message += Environment.NewLine;
			message += string.Format("Message: {0}", ex.Message);
			message += Environment.NewLine;
			message += string.Format("StackTrace: {0}", ex.StackTrace);
			message += Environment.NewLine;
			message += string.Format("Source: {0}", ex.Source);
			message += Environment.NewLine;
			message += string.Format("TargetSite: {0}", ex.TargetSite.ToString());
			message += Environment.NewLine;
			message += "-----------------------------------------------------------";
			message += Environment.NewLine;
			string path = Path.Combine(TempPath, "ErrorLog.txt");
			using (StreamWriter writer = new StreamWriter(path, true))
			{
				writer.WriteLine(message);
				writer.Close();
			}
		}



	}
}
